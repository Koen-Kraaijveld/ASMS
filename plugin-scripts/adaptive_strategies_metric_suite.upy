import understand
import statistics


def name():
    """
    Defines the name of the plugin that will be used by Understand.

    Returns: string containing the name of the plugin.

    """
    return "Adaptive Strategies Metric Suite"


def test_global(db):
    """
    Checks to see if the IReport can be run globally.

    Args:
        db: the instance of the DB corresponding to the one that the Understand API will operate in.

    Returns: true if the IReport can be run globally.

    """

    return True


def test_entity(ent):
    """
    Checks to see if the IReport can be run on an entity.

    Args:
        ent: the instance an Entity corresponding to the that the Understand API will operate on.

    Returns: true if the IReport can be run on an Entity type.

    """

    return True


def test_architecture(arch):
    """
    Checks to see if the IReport can be run on an Architecture.

    Args:
        arch: the instance an Architecture corresponding to the that the Understand API will operate on.

    Returns: true if the IReport can be run on an Architecture type.

    """

    return True


def support_abort():
    """
    Checks if the IReport supports abort requests.

    Returns: true if the IReport can be aborted.

    """

    return False


def abort():
    """
    Signal used to see if an abort is requested.

    Returns: a signal that shows that an abort has been requested.

    """

    pass


def support_proress():
    """
    Checks to see if the IReport shows its execution progress.

    Returns: true if the IReport should provide an indication of progress (i.e. a progress bar).

    """

    return True


def init(report):
    """
    Checks the possible options associated with an IReport.

    Args:
        report: instance of the IReport.
    """

    pass


def generate(report, target):
    """
    Runs the metrics and displays them in a generated UI box related to the IReport instance.

    Args:
        report: instance of the IReport.
        target: target entity, architecture or global execution on which the metrics will run
    """
    starting_tree_depth = 1

    if isinstance(target, understand.Ent):
        method_generate_adaptive_metrics_report(report, target, starting_tree_depth)
    if isinstance(target, understand.Arch):
        arch_generate_adaptive_metrics_report(report, target, starting_tree_depth)

    report.print("\n")


# ====================  ARCHITECTURE - ADAPTIVE METRICS REPORT  ==================== #

def arch_generate_adaptive_metrics_report(report, arch, tree_depth):
    """
    Runs the metrics on an architecture and displays them in the IReport.

    Args:
        report: instance of the IReport.
        arch: architecture on which the metrics will run.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
    """

    print_tree_title(report, "Adaptive Strategies Metric Results (Architecture)", tree_depth)
    arch_generate_concentration_of_impact_tree(report, arch, tree_depth + 1)
    arch_calculate_elementarity_tree(report, arch, tree_depth + 1)

    print_tree_title(report, "Adaptive Strategies Metric Results (Entity)", tree_depth + 1)
    for ent in arch.ents():
        print_ent_line(report, ent, tree_depth + 2)
        method_generate_locality_tree(report, ent, tree_depth + 3, is_default_collapsed=0)
        method_generate_maintainability_tree(report, ent, tree_depth + 3)


def arch_generate_concentration_of_impact_tree(report, arch, tree_depth):
    """
    Runs the Concentration of Impact metrics on an architecture and displays their results.

    Args:
        report: instance of the IReport.
        arch: architecture on which the metrics will run.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
    """
    print_tree_title(report, "Concentration of Impact", tree_depth, is_default_collapsed=1)
    arch_calculate_decentralization_tree(report, arch, tree_depth + 1)


def arch_calculate_decentralization_tree(report, arch, tree_depth):
    """
    Runs the Global Impact Radius Distribution and Statistics metrics and displays their results.

    Args:
        report: instance of the IReport.
        arch: architecture on which the metrics will run.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
    """
    arch_children = arch.ents()
    ent_arr = []
    ent_global_impact_arr = []

    for ent in arch_children:
        global_impact = calculate_global_impact_for_method(report, ent)
        ent_arr.append({
            "ent": ent,
            "impact": global_impact
        })
        ent_global_impact_arr.append(global_impact)

    report.tree(tree_depth, 0)
    report.nobold()
    print_line(report, "Global Impact Radius Distribution", tree_depth)

    ent_arr = sorted(ent_arr, key=lambda d: d['impact'], reverse=True)
    summed_ent_global_impact = sum(ent_global_impact_arr)

    ent_relative_impact_arr = []
    for i in range(0, len(ent_global_impact_arr)):
        ent_relative_impact_arr.append(ent_global_impact_arr[i] / summed_ent_global_impact)

    for ent in ent_arr:
        print_component_impact(report, ent, summed_ent_global_impact, tree_depth - 1)

    arch_calculate_impact_decentralization_statistics(report, ent_arr, ent_relative_impact_arr,
                                                       summed_ent_global_impact, tree_depth - 1)


def arch_calculate_impact_decentralization_statistics(report, ent_arr, ent_global_impact_arr,
                                                       summed_ent_global_impact, tree_depth):
    """
    Runs the Global Impact Radius Statistics metrics and displays their results.

    Args:
        report: instance of the IReport.
        ent_arr: array containing the entities that the metric will run on.
        ent_global_impact_arr: array containing the Relative Global Impact Radius of each entity in the architecture.
        summed_ent_global_impact: summed value of the ent_global_impact_arr array.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
    """

    print_line(report, "Global Impact Radius Statistics", tree_depth + 1, is_default_collapsed=1)

    tree_depth += 1
    print_line(report, "Maximum", tree_depth + 1,
               hover_text=METRIC_DESCRIPTION["GlobalImpactRadiusDistribution"]["Statistics"]["Maximum"],
               is_default_collapsed=1)
    print_component_impact(report, ent_arr[0], summed_ent_global_impact, tree_depth)

    print_line(report, "Minimum", tree_depth + 1,
               hover_text=METRIC_DESCRIPTION["GlobalImpactRadiusDistribution"]["Statistics"]["Minimum"])
    print_component_impact(report, ent_arr[len(ent_arr) - 1], summed_ent_global_impact, tree_depth)

    mean = round(statistics.mean(ent_global_impact_arr), 2)
    print_mapped_line(report, "Mean", mean, tree_depth + 1,
                      hover_text=METRIC_DESCRIPTION["GlobalImpactRadiusDistribution"]["Statistics"]["Mean"])

    median = round(statistics.median(ent_global_impact_arr), 2)
    print_mapped_line(report, "Median", median, tree_depth + 1,
                      hover_text=METRIC_DESCRIPTION["GlobalImpactRadiusDistribution"]["Statistics"]["Median"])

    if len(ent_global_impact_arr) >= 2:
        stdev = round(statistics.stdev(ent_global_impact_arr), 2)
        print_mapped_line(report, "Standard deviation", stdev, tree_depth + 1,
                          hover_text=METRIC_DESCRIPTION["GlobalImpactRadiusDistribution"]["Statistics"][
                              "StandardDeviation"])


def print_component_impact(report, ent, summed_ent_global_impact, tree_depth):
    """
    Displays the Relative Global Impact Radius values in the IReport instance.

    Args:
        report: instance of the IReport.
        ent: entity to be displayed in the IReport.
        summed_ent_global_impact: summed value of the Relative Global Impact Radius of each entity in the architecture.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
    """

    spread = round(ent["impact"] / summed_ent_global_impact, 2)
    print_ent_line(report, ent["ent"], tree_depth + 2)
    print_mapped_line(report, "Relative", spread, tree_depth + 3,
                      METRIC_DESCRIPTION["GlobalImpactRadiusDistribution"]["Relative"],
                      is_default_collapsed=1)


def arch_calculate_elementarity_tree(report, arch, tree_depth):
    """
    Runs the Dependency Degree Tree metric and displays its results.

    Args:
        report: instance of the IReport.
        arch: architecture on which the metrics will run.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
    """

    print_tree_title(report, "Elementarity", tree_depth, is_default_collapsed=1)
    grouped_ents = group_together_classes_and_methods(arch.ents())

    elementarity_tree_method = construct_elementarity_tree(grouped_ents["methods"])
    elementarity_tree_class = construct_elementarity_tree_class(grouped_ents["classes"])

    print_line(report, "Dependency Degree", tree_depth + 1, hover_text=METRIC_DESCRIPTION["DependencyDegree"]["Tree"],
               is_default_collapsed=1)
    tree_depth += 1

    if len(elementarity_tree_method["final"]) > 0 or len(elementarity_tree_method["misc"]) > 0:
        print_line(report, f"Method/Function", tree_depth + 1, is_default_collapsed=1)
        for i in range(0, len(elementarity_tree_method["final"])):
            print_line(report, f"Tree #{i + 1}", tree_depth + 2)
            print_elementarity_tree(report, elementarity_tree_method["final"][i], tree_depth + 2)
            print_line(report, "Information", tree_depth + 3)
            calculate_elementarity_tree_info(report, elementarity_tree_method["final"][i], tree_depth + 3)

        if len(elementarity_tree_method["misc"]) > 0:
            print_line(report, f"Miscellaneous", tree_depth + 2)
            for i in range(0, len(elementarity_tree_method["misc"])):
                print_elementarity_tree(report, elementarity_tree_method["misc"][i], tree_depth + 2)

    if len(elementarity_tree_class["final"]) > 0 or len(elementarity_tree_class["misc"]) > 0:
        print_line(report, f"Class", tree_depth + 1, is_default_collapsed=1)
        for i in range(0, len(elementarity_tree_class["final"])):
            print_line(report, f"Tree #{i + 1}", tree_depth + 2)
            print_elementarity_tree(report, elementarity_tree_class["final"][i], tree_depth + 2)
            print_line(report, "Information", tree_depth + 3)
            calculate_elementarity_tree_info(report, elementarity_tree_class["final"][i], tree_depth + 3)

        if len(elementarity_tree_class["misc"]) > 0:
            print_line(report, f"Miscellaneous", tree_depth + 2)
            for i in range(0, len(elementarity_tree_class["misc"])):
                print_elementarity_tree(report, elementarity_tree_class["misc"][i], tree_depth + 2)


def calculate_elementarity_tree_info(report, elementarity_tree, tree_depth):
    """
    Runs the Dependency Degree metrics with the Depends on and Depended on by subtypes, and displays their results.

    Args:
        report: instance of the IReport.
        elementarity_tree: constructed tree showing the dependency relations between the entities in the architecture
        through a tree data structure
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
    """
    elementarity_tree_info = count_dependencies(elementarity_tree, 0, [])
    tree_dependencies_info = sorted(elementarity_tree_info, key=lambda d: d['Depends on'])

    for dependency in tree_dependencies_info:
        print_ent_line(report, dependency["ent"], tree_depth + 1)
        print_mapped_line(report, "Depends On", dependency["Depends on"], tree_depth + 2,
                          hover_text=METRIC_DESCRIPTION["DependencyDegree"]["DependsOn"],
                          is_default_collapsed=1)
        print_mapped_line(report, "Depended On By", dependency["Depended by"], tree_depth + 2,
                          hover_text=METRIC_DESCRIPTION["DependencyDegree"]["DependedOnBy"],
                          is_default_collapsed=1)


def print_elementarity_tree(report, tree, tree_depth):
    """
    Displays the result of the Dependency Degree Tree metric.

    Args:
        report: instance of the IReport.
        tree: constructed tree showing the dependency relations between the entities in the architecture
        through a tree data structure.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
    """

    print_ent_line(report, tree["ent"], tree_depth + 1)
    for tree_child in tree["children"]:
        print_elementarity_tree(report, tree_child, tree_depth + 1)


def construct_elementarity_tree(target_ent_arr):
    """
    Constructs the Dependency Degree Tree from the entities in the architecture.

    Args:
        target_ent_arr: the entities in the architecture that the metric will run on.

    Returns:
        Array of dictionaries corresponding to a node in the constructed Dependency Degree Tree.
    """

    direct_called_func = []
    for target_ent in target_ent_arr:
        sub_called_func = {
            "ent": target_ent,
            "called_funcs": collect_called_func_names(target_ent, []),
            "children": [],
            "parent": None,
            "is_in_final_tree": True
        }

        direct_called_func.append(sub_called_func)

    for direct_ent in direct_called_func:
        for target_ent in target_ent_arr:
            if target_ent in direct_ent["called_funcs"]:
                direct_ent["children"].append(target_ent)

    for direct_ent_1 in direct_called_func:
        for direct_ent_2 in direct_called_func:
            for i in range(0, len(direct_ent_2["children"])):
                if direct_ent_1["ent"] == direct_ent_2["children"][i]:
                    direct_ent_1["is_in_final_tree"] = False
                    direct_ent_2["children"][i] = direct_ent_1
                    direct_ent_2["children"][i]["parent"] = direct_ent_2["ent"]

    final_tree_arr = {
        "final": [],
        "misc": []
    }
    for tree in direct_called_func:
        if tree["is_in_final_tree"]:
            if len(tree["children"]) <= 0:
                final_tree_arr["misc"].append(tree)
            else:
                final_tree_arr["final"].append(tree)

    return final_tree_arr


# ====================  CLASS - ADAPTIVE METRICS REPORT  ==================== #

def construct_elementarity_tree_class(ents):
    """
    Constructs a Dependency Degree Tree out of the dependency relations between entities in an architecture.

    Args:
        ents: array of entities from which its Dependency Degree Tree will be constructed.

    Returns: a dictionary containing the Dependency Degree Tree.

    """
    classes = []
    for ent in ents:

        temp_ent_array = []
        for temp_ent in ents:
            temp_ent_array.append(temp_ent.ref().ent())

        ent_dependsby_arr = []
        for dependency in ent.dependsby().keys():
            if dependency in ents:
                ent_dependsby_arr.append({
                    "ent": dependency.ref().ent(),
                    "children": None,
                    "parent": None,
                    "is_in_final_tree": True,
                })

        classes.append({
            "ent": ent.ref().ent(),
            "children": ent_dependsby_arr,
            "parent": None,
            "is_in_final_tree": True,
        })

    for class_1 in classes:
        for class_2 in classes:
            for i in range(0, len(class_2["children"])):
                if class_1["ent"] == class_2["children"][i]["ent"]:
                    class_1["is_in_final_tree"] = False
                    class_2["children"][i] = class_1
                    class_2["children"][i]["parent"] = class_2["ent"]

    final_tree_arr = {
        "final": [],
        "misc": []
    }
    for tree in classes:
        if tree["is_in_final_tree"]:
            if len(tree["children"]) <= 0:
                final_tree_arr["misc"].append(tree)
            else:
                final_tree_arr["final"].append(tree)

    return final_tree_arr


# ====================  METHOD - ADAPTIVE METRICS REPORT  ==================== #

def method_generate_adaptive_metrics_report(report, target, tree_depth):
    """
    Runs the metrics designed for an entity and displays the results.

    Args:
        report: instance of the IReport.
        target: target entity on which the metrics will run.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
    """

    report_title = f"Adaptive Strategies Metric Results "
    if is_class(target):
        report_title += "(Class)"
    elif is_method(target):
        report_title += "(Function)"

    print_tree_title(report, report_title, tree_depth)

    if not is_class(target) and not is_method(target):
        print_line(report, "Invalid target type. Please run the report on either a function or a class.", tree_depth)
        return

    report.tree(tree_depth + 1)
    report.entity(target)
    report.print(target.name())
    report.entity()
    report.print(f" - {target.kindname()}")

    method_generate_locality_tree(report, target, tree_depth + 1, is_default_collapsed=1)
    method_generate_maintainability_tree(report, target, tree_depth + 1)


def method_generate_maintainability_tree(report, ent, tree_depth):
    """
    Runs the Maintainability metrics and displays their results.

    Args:
        report: instance of the IReport.
        ent: entity on which the metrics will run.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
    """

    print_tree_title(report, "Maintainability", tree_depth)
    method_calculate_testability(report, ent, tree_depth + 1)

    if is_class(ent):
        method_calculate_modifiability(report, ent, tree_depth + 1)


def method_calculate_testability(report, ent, tree_depth):
    """
    Runs the Adaptive Testability metrics and displays their results.
    Args:
        report: instance of the IReport.
        ent: entity on which the metrics will run.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
    """

    print_tree_title(report, "Testability", tree_depth)

    complexity_type = []
    if is_class(ent):
        complexity_type.append("SumCyclomatic")
        complexity_type.append("SumCyclomaticStrict")
    else:
        complexity_type.append("Cyclomatic")
        complexity_type.append("CyclomaticStrict")

    test_case_min = get_metric_from_name(ent, complexity_type[0])
    test_case_max = get_metric_from_name(ent, complexity_type[1])
    print_mapped_line(report, "Cyclomatic Complexity", test_case_min, tree_depth + 1,
                      METRIC_DESCRIPTION["Testability"]["Cyclomatic"], is_default_collapsed=1)
    print_mapped_line(report, "Strict Cyclomatic Complexity", test_case_max, tree_depth + 1,
                      METRIC_DESCRIPTION["Testability"]["StrictCyclomatic"], is_default_collapsed=1)


def method_calculate_modifiability(report, ent, tree_depth):
    """
    Runs the Adaptive Modifiability metrics and displays their results.
    Args:
        report: instance of the IReport.
        ent: entity on which the metrics will run.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
    """

    print_tree_title(report, "Modifiability", tree_depth, is_default_collapsed=1)

    coupling = get_metric_from_name(ent, "CountClassCoupled")
    print_mapped_line(report, "Coupling", coupling, tree_depth + 1,
                      METRIC_DESCRIPTION["Modifiability"]["Coupling"], is_default_collapsed=1)

    cohesion = get_metric_from_name(ent, "PercentLackOfCohesion")
    if cohesion is not None:
        print_mapped_line(report, "Lack of Cohesion", str(cohesion) + "%", tree_depth + 1,
                          METRIC_DESCRIPTION["Modifiability"]["LackOfCohesion"], is_default_collapsed=1)


def method_generate_locality_tree(report, ent, tree_depth, is_default_collapsed=0):
    """
    Runs the Locality metrics and displays their results.

    Args:
        report: instance of the IReport.
        ent: entity on which the metrics will run.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
        is_default_collapsed: boolean to decide if this metrics dropdown tree should be collapsed when initially
        displayed.
    """

    print_tree_title(report, "Locality", tree_depth, is_default_collapsed=is_default_collapsed)
    method_calculate_impact_radius(report, ent, tree_depth + 1)


def method_calculate_impact_radius(report, ent, tree_depth):
    """
    Runs the Impact Radius metrics and displays their results.

    Args:
        report: instance of the IReport.
        ent: entity on which the metrics will run.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
    """
    print_tree_title(report, "Impact Radius", tree_depth, is_default_collapsed=1)

    local_impact = calculate_local_impact_for_method(report, ent)
    print_mapped_line(report, "Local", local_impact, tree_depth + 1,
                      hover_text=METRIC_DESCRIPTION["ImpactRadius"]["Local"], is_default_collapsed=1)

    global_impact = calculate_global_impact_for_method(report, ent)
    print_mapped_line(report, "Global", global_impact, tree_depth + 1,
                      hover_text=METRIC_DESCRIPTION["ImpactRadius"]["Global"], is_default_collapsed=1)


# ===============================  UTILITIES  =============================== #

def get_metric_from_name(ent, name):
    """
    Retrieves a metric from an entity based on the given metric name.

    Args:
        ent: entity from which the metric will be retrieved.
        name: name of the metric.

    Returns: retrieved metric value.
    """
    metric = ent.metric((name,))
    return metric[name]


def sum_metrics_from_ent_array(ent_array, metric_name):
    """
    Sums the metrics from an array of entities based on the given metric name.

    Args:
        ent_array: array of entities from which the metric will be retrieved and summed.
        metric_name: name of the metric

    Returns: summed metric value.
    """

    total = 0
    for ent in ent_array:
        metric_val = get_metric_from_name(ent, metric_name)
        if metric_val is not None:
            total += metric_val

    return total


def calculate_local_impact_for_method(report, ent):
    """
    Calculates the Local Impact Radius of a method.
    Args:
        report: instance of the IReport.
        ent: entity on which the Local Impact Radius will be calculated.

    Returns: Local Impact Radius value.

    """
    starting_local_impact = get_metric_from_name(ent, "CountStmtExe")

    if not is_class(ent):
        first_level_called_ent_names = collect_called_func_names(ent, [])
        return starting_local_impact + sum_metrics_from_ent_array(first_level_called_ent_names, "CountStmtExe")
    else:
        class_funcs = collect_defined_class_funcs(ent)

        parent_class = find_parent_class(ent)
        if parent_class is not None:
            parent_class_funcs = collect_defined_class_funcs(parent_class.ent())
            for func in parent_class_funcs:
                if "Private" not in func.kindname().split(" "):
                    class_funcs.append(func)

        class_func_called_arr = []
        for class_func in class_funcs:
            class_func_called_arr.append(class_func)
            collect_called_func_names(class_func, class_func_called_arr)

        return starting_local_impact + sum_metrics_from_ent_array(class_func_called_arr, "CountStmtExe")


def calculate_global_impact_for_method(report, ent):
    """
    Calculates the Global Impact Radius of a method.
    Args:
        report: instance of the IReport.
        ent: entity on which the Global Impact Radius will be calculated.

    Returns: Global Impact Radius value.

    """

    starting_global_impact = get_metric_from_name(ent, "CountStmtExe")
    total_called_ent_names = collect_total_called_ent_names(report, ent)
    return starting_global_impact + sum_metrics_from_ent_array(total_called_ent_names, "CountStmtExe")


def sum(array):
    """
    Sums the values from a given array.

    Args:
        array: array from which the sum will be calculated.

    Returns: the summed value from the array.

    """
    total = 0
    for n in array:
        total += n

    return total


def collect_defined_class_funcs(class_name):
    """
    Collects all methods associated with a class.

    Args:
        class_name: name of the class from which its methods will be calculated.

    Returns: an array of methods associated with the input class.

    """
    defined_class_funcs = []

    if refs := class_name.refs():
        for ref in refs:
            kind = ref.kind().longname()
            ref_kind_split = kind.split()
            if ("Define" in ref_kind_split) and (ref.ent() not in defined_class_funcs):
                defined_class_funcs.append(ref.ent())

    return defined_class_funcs


def collect_called_func_names(ent, called_func_names_arr):
    """
    Collects all methods that are directly connected to an input method's call graph.

    Args:
        ent: the entity (method) from which its directly connected call graph methods will be retrieved.
        called_func_names_arr: empty array in which the directly connected methods will be placed.

    Returns: array containing the directly connected methods from an input method's call graph.

    """
    if refs := ent.refs():
        for ref in refs:
            kind = ref.kind().longname()
            ref_kind_split = kind.split()
            ent_kind_split = ref.ent().kind().longname().split()

            if ("Call" in ref_kind_split) and (
                    "Method" in ent_kind_split or "Function" in ent_kind_split) and ref.ent() not in called_func_names_arr:
                called_func_names_arr.append(ref.ent())

    return called_func_names_arr


def collect_total_called_ent_names(report, ent):
    """
        Collects all methods that are reachable (directly and indirectly connected) to an input method's call graph.

        Args:
            report: instance of the IReport.
            ent: the entity (method) from which its reachable call graph methods will be retrieved.

        Returns: array containing the reachable methods from an input method's call graph.

        """
    if not is_class(ent):

        total_called_ent_names = collect_called_func_names(ent, [])
        for ent in total_called_ent_names:
            collect_called_func_names(ent, total_called_ent_names)

        return total_called_ent_names

    else:
        class_funcs = collect_defined_class_funcs(ent)

        parent_class = find_parent_class(ent)
        if parent_class is not None:
            parent_class_funcs = collect_defined_class_funcs(parent_class.ent())
            for func in parent_class_funcs:
                if "Private" not in func.kindname().split(" "):
                    class_funcs.append(func)

        class_func_called_arr = []
        for class_func in class_funcs:
            class_func_called_arr.append(class_func)
            called_funcs = collect_called_func_names(class_func, class_func_called_arr)
            for called_func in called_funcs:
                collect_called_func_names(called_func, class_func_called_arr)

        return class_func_called_arr


def count_dependencies(tree, depends_on_count, dependencies_info):
    """
    Recursively counts the Depends on and Depended on by subtypes for the Dependency Degree metric.

    Args:
        tree: constructed tree showing the dependency relations between the entities in the architecture
        through a tree data structure.
        depends_on_count: number to keep track of the Depends on count for an input node.
        dependencies_info: array of dictionaries to keep track of the Depends on and Depended on by subtypes of each
        node in the tree.

    Returns:

    """
    if len(tree["children"]) > 0:
        depended_by_count = calculate_total_nodes(tree, 0)
    else:
        depended_by_count = 0

    dependency_info = {
        "ent": tree["ent"],
        "Depends on": depends_on_count,
        "Depended by": depended_by_count
    }

    depends_on_count += 1

    for ent_child in tree["children"]:
        count_dependencies(ent_child, depends_on_count, dependencies_info)

    dependencies_info.append(dependency_info)

    return dependencies_info


def find_parent_class(child_class):
    """
    Finds the parent class of an input class.

    Args:
        child_class: the class from which its parent will be retrieved.

    Returns: the parent class of the input class (child_class)

    """
    dependencies = child_class.depends()
    for target in sorted(dependencies.keys(), key=lambda target: target.longname()):
        for ref in dependencies[target]:
            ref_kind_split = ref.kind().longname().split(" ")
            if "Extend" in ref_kind_split and not ref.file().library():
                return ref


def calculate_total_nodes(node, count):
    """
    Calculates the number of total children of a node in a tree.

    Args:
        node: the node from which its total number of children will be calculated.
        count: number to keep track of the number of children associated with an input node.

    Returns: the number of total children that a node has in a tree.

    """
    count = len(node["children"])
    for child in node["children"]:
        count += calculate_total_nodes(child, count)

    return count


def group_together_classes_and_methods(ents):
    """
    Groups together classes and methods from an initial array of entities.

    Args:
        ents: array of entities which will be grouped into either classes or methods.

    Returns: a dictionary containing the classes and methods.

    """
    classes = []
    methods = []

    for ent in ents:
        if is_class(ent):
            classes.append(ent)
        elif is_method(ent):

            methods.append(ent)

    return {
        "classes": classes,
        "methods": methods
    }


def is_class(ent):
    """
    Checks if an input entity is a class.

    Args:
        ent: entity that will be checked if it is a class.

    Returns: true if the entity is a class.

    """
    type_split = ent.kind().name().split()
    return "Class" in type_split or "Interface" in type_split


def is_method(ent):
    """
    Checks if an input entity is a method.

    Args:
        ent: entity that will be checked if it is a method.

    Returns: true if the entity is a method.

    """

    type_split = ent.kind().name().split()
    return "Method" in type_split or "Function" in type_split


def print_line(report, line, tree_depth, hover_text=None, is_default_collapsed=0):
    """
    Displays a line of text in the IReport UI box.

    Args:
        report: instance of the IReport.
        line: text that will be displayed.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
        hover_text: text that will be displayed when hovering cursor over the displayed text in the UI box.
        is_default_collapsed: boolean to decide if this metrics dropdown tree should be collapsed when initially
        displayed.
    """
    text = str(line)

    report.tree(tree_depth, is_default_collapsed)

    if hover_text:
        report.hover(hover_text)

    report.nobold()
    report.print(text)

    if hover_text:
        report.hover()


def print_mapped_line(report, name, value, tree_depth, hover_text=None, is_default_collapsed=0):
    """
    Displays a line of text that is mapped to a value in the IReport UI box.

    Args:
        report: instance of the IReport.
        name: text that will be displayed.
        value: value that is mapped from the name.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
        hover_text: text that will be displayed when hovering cursor over the displayed text in the UI box.
        is_default_collapsed: boolean to decide if this metrics dropdown tree should be collapsed when initially
        displayed.
    """

    text = str(value)

    report.tree(tree_depth, is_default_collapsed)

    if hover_text:
        report.hover(hover_text)

    report.nobold()
    report.print(name + ": ")

    if hover_text:
        report.hover()

    report.bold()
    report.print(text)
    report.nobold()


def print_mapped_ent_line(report, ent, value, tree_depth, hover_text=None, is_default_collapsed=0):
    """
    Displays an entity hyperlink that is mapped to a value in the IReport UI box.

    Args:
        report: instance of the IReport.
        ent: ent hyperlink that will be displayed.
        value: value that is mapped from the name.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
        hover_text: text that will be displayed when hovering cursor over the displayed text in the UI box.
        is_default_collapsed: boolean to decide if this metrics dropdown tree should be collapsed when initially
        displayed.
    """

    text = str(value)

    report.tree(tree_depth, is_default_collapsed)

    if hover_text:
        report.hover(hover_text)

    report.nobold()
    report.entity(ent)
    report.print(ent.name() + ": ")
    report.entity()

    if hover_text:
        report.hover()

    report.bold()
    report.print(text)
    report.nobold()


def print_debug_line(report, debug_info):
    """
    Displays a line of text in red used for debugging.

    Args:
        report: instance of the IReport.
        debug_info: text that will be displayed.
    """

    report.fontcolor("red")
    report.nobold()
    report.print("\n")
    report.print(str(debug_info))
    report.print("\n")
    report.fontcolor("black")


def print_tree_title(report, tree_name, tree_depth, is_default_collapsed=0):
    """
    Displays a line of text in bold in the IReport UI box. This is used as a title for dropdown trees.

    Args:
        report: instance of the IReport.
        tree_name: line of text in bold that will be displayed.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
        is_default_collapsed: boolean to decide if this metrics dropdown tree should be collapsed when initially
        displayed.
    """

    report.tree(tree_depth, is_default_collapsed)
    report.bold()
    report.print(tree_name)
    report.nobold()


def print_ent_line(report, ent, tree_depth, is_default_collapsed=0):
    """
    Displays an entity hyperlink in the IReport UI box.

    Args:
        report: instance of the IReport.
        ent: ent hyperlink that will be displayed.
        tree_depth: current tree depth to manage at which level the dropdown trees will render.
        is_default_collapsed: boolean to decide if this metrics dropdown tree should be collapsed when initially
        displayed.
    """

    report.tree(tree_depth, is_default_collapsed)
    report.entity(ent)
    report.nobold()
    report.print(ent.simplename())
    report.entity()


# Dictionary used to store the metric description for when a user hovers their cursor over a metric in the IReport UI
# box.
METRIC_DESCRIPTION = {
    "ImpactRadius": {
        "Local": "Number of directly reachable executable statements",
        "Global": "Number of reachable (direct or indirect) executable statements across the entire system"
    },
    "Testability": {
        "Cyclomatic": "Number of linearly independent paths through an entity’s control flow graph",
        "StrictCyclomatic": "Number of linearly independent paths through an entity’s control flow graph, including "
                            "permutations of conditional logical expressions "
    },
    "Modifiability": {
        "Coupling": "Number of other classes coupled to",
        "LackOfCohesion": "The percentage of class methods that do not use a class variable instance"
    },
    "GlobalImpactRadiusDistribution": {
        "Relative": "The Global Impact Radius relative to all other classes and functions in the same architecture",
        "Statistics": {
            "Maximum": "The class or function with the maximum Relative Global Impact Radius",
            "Minimum": "The class or function with the minimum Relative Global Impact Radius",
            "Mean": "The mean of the architecture based on the contained class or function Relative Global Impact "
                    "Radius",
            "Median": "The median of the architecture based on the contained class or function Relative Global Impact "
                      "Radius",
            "StandardDeviation": "The standard deviation of the architecture based on the contained class or "
                                 "function Relative Global Impact Radius "
        }
    },
    "DependencyDegree": {
        "DependsOn": "The number of classes of methods that a given class or function depends on",
        "DependedOnBy": "The number of classes of methods that a given class or function is depended on by",
        "Tree": "Tree data structure that shows the dependency relations between each class or function contained in "
                "the architecture ",
    }
}
